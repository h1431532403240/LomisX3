openapi: 3.0.3
info:
  title: 'LomisX3 API 文檔'
  description: 'LomisX3 企業級管理系統的完整 RESTful API 文檔 v2.5'
  version: 2.5.0
servers:
  - url: /
    description: '相對路徑'
tags:
  - name: '認證 (Auth)'
    description: '使用者登入、登出、2FA 及身分驗證'
  - name: '使用者管理 (Users)'
    description: '管理使用者帳號、角色、權限和狀態'
  - name: '商品分類 (Product Categories)'
    description: '管理商品分類階層、狀態和詳細資訊'

security:
  - sanctum: []

paths:
  # ------------------------------------------------------------
  # 認證 API
  # ------------------------------------------------------------
  /api/auth/login:
    post:
      tags: ['認證 (Auth)']
      summary: '使用者登入'
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: '登入成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/logout:
    post:
      tags: ['認證 (Auth)']
      summary: '使用者登出'
      operationId: logoutUser
      responses:
        '204':
          description: '成功登出'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /api/auth/me:
    get:
      tags: ['認證 (Auth)']
      summary: '取得當前登入的使用者資訊'
      operationId: getCurrentUser
      responses:
        '200':
          description: '成功取得使用者資訊'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/2fa/challenge:
    post:
      tags: ['認證 (Auth)']
      summary: '二階段驗證 (2FA)'
      operationId: twoFactorChallenge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorChallengeRequest'
      responses:
        '200':
          description: '2FA 驗證成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  # ------------------------------------------------------------
  # 使用者管理 API
  # ------------------------------------------------------------
  /api/users:
    get:
      tags: ['使用者管理 (Users)']
      summary: '取得使用者列表 (分頁)'
      operationId: listUsers
      parameters:
        - { name: page, in: query, schema: { type: integer, default: 1 }, description: '頁碼' }
        - { name: per_page, in: query, schema: { type: integer, default: 15 }, description: '每頁數量' }
        - { name: search, in: query, schema: { type: string }, description: '關鍵字搜尋 (姓名, 用戶名, email)' }
        - { name: status, in: query, schema: { type: string, enum: [active, inactive, suspended] }, description: '狀態篩選' }
        - { name: store_id, in: query, schema: { type: integer }, description: '門市 ID 篩選' }
        - { name: role, in: query, schema: { type: string }, description: '角色名稱篩選' }
        - { name: has_2fa, in: query, schema: { type: boolean }, description: '是否啟用 2FA' }
        - { name: email_verified, in: query, schema: { type: boolean }, description: '是否驗證 Email' }
        - { name: created_from, in: query, schema: { type: string, format: date }, description: '建立日期 (起)' }
        - { name: created_to, in: query, schema: { type: string, format: date }, description: '建立日期 (迄)' }
        - { name: sort, in: query, schema: { type: string, enum: [name, email, created_at] }, description: '排序欄位' }
        - { name: order, in: query, schema: { type: string, enum: [asc, desc] }, description: '排序方向' }
        - { name: include, in: query, schema: { type: string }, description: '包含的關聯 (e.g., roles,store)' }
        - { name: with_count, in: query, schema: { type: string }, description: '包含的計數關聯 (e.g., logs)' }
      responses:
        '200':
          description: '成功取得使用者列表'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: ['使用者管理 (Users)']
      summary: '建立新使用者'
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        '201':
          description: '成功建立使用者'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/users/{id}:
    get:
      tags: ['使用者管理 (Users)']
      summary: '取得單一使用者詳細資訊'
      operationId: getUserById
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer }, description: '使用者 ID' }
      responses:
        '200':
          description: '成功取得使用者資訊'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: ['使用者管理 (Users)']
      summary: '更新使用者資訊'
      operationId: updateUser
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer }, description: '使用者 ID' }
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        '200':
          description: '成功更新使用者資訊'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: ['使用者管理 (Users)']
      summary: '刪除使用者'
      operationId: deleteUser
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer }, description: '使用者 ID' }
      responses:
        '204':
          description: '成功刪除'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/users/batch/status:
    patch:
      tags: ['使用者管理 (Users)']
      summary: '批次更新使用者狀態'
      operationId: batchUpdateUserStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchStatusUserRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/users/{id}/reset-password:
    post:
      tags: ['使用者管理 (Users)']
      summary: '重設使用者密碼'
      operationId: resetUserPassword
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer }, description: '使用者 ID' }
      responses:
        '200':
          description: '成功發送密碼重設郵件'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
          
  /api/users/statistics:
    get:
      tags: ['使用者管理 (Users)']
      summary: '取得使用者統計數據'
      operationId: getUserStatistics
      parameters:
        - { name: store_id, in: query, schema: { type: integer }, description: '依門市 ID 篩選' }
      responses:
        '200':
          description: '成功取得統計數據'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'

  # ------------------------------------------------------------
  # 商品分類 API
  # ------------------------------------------------------------
  /api/product-categories:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得商品分類列表 (分頁)'
      operationId: listProductCategories
      parameters:
        - { name: page, in: query, schema: { type: integer, default: 1 } }
        - { name: per_page, in: query, schema: { type: integer, default: 15 } }
        - { name: search, in: query, schema: { type: string }, description: '名稱或 slug 搜尋' }
        - { name: status, in: query, schema: { type: boolean }, description: '狀態篩選 (true=啟用, false=停用)' }
        - { name: parent_id, in: query, schema: { type: integer }, description: '父分類 ID' }
        - { name: sort, in: query, schema: { type: string, enum: [name, position, created_at] } }
        - { name: direction, in: query, schema: { type: string, enum: [asc, desc] } }
      responses:
        '200':
          description: '成功取得列表'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoriesResponse'
    post:
      tags: ['商品分類 (Product Categories)']
      summary: '建立新商品分類'
      operationId: createProductCategory
      requestBody:
        $ref: '#/components/requestBodies/CreateCategoryRequest'
      responses:
        '201':
          description: '成功建立'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/product-categories/tree:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得完整的商品分類樹狀結構'
      operationId: getProductCategoryTree
      parameters:
        - { name: status, in: query, schema: { type: boolean }, description: '狀態篩選' }
      responses:
        '200':
          description: '成功取得樹狀結構'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTreeResponse'

  /api/product-categories/{id}:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得單一商品分類資訊'
      operationId: getProductCategoryById
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: '成功取得'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: ['商品分類 (Product Categories)']
      summary: '更新商品分類'
      operationId: updateProductCategory
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      requestBody:
        $ref: '#/components/requestBodies/UpdateCategoryRequest'
      responses:
        '200':
          description: '成功更新'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: ['商品分類 (Product Categories)']
      summary: '刪除商品分類'
      operationId: deleteProductCategory
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '204':
          description: '成功刪除'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/product-categories/batch/status:
    patch:
      tags: ['商品分類 (Product Categories)']
      summary: '批次更新商品分類狀態'
      operationId: batchUpdateCategoryStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchStatusCategoriesRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/product-categories/batch/delete:
    post:
      tags: ['商品分類 (Product Categories)']
      summary: '批次刪除商品分類'
      operationId: batchDeleteCategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids: { type: array, items: { type: integer }, description: '要刪除的分類 ID 列表' }
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /api/product-categories/sort:
    patch:
      tags: ['商品分類 (Product Categories)']
      summary: '更新商品分類排序'
      operationId: sortCategories
      requestBody:
        $ref: '#/components/requestBodies/SortCategoriesRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /api/product-categories/{id}/breadcrumbs:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得商品分類麵包屑'
      operationId: getCategoryBreadcrumbs
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: '成功取得麵包屑'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreadcrumbResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/product-categories/{id}/descendants:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得一個分類的所有後代（樹狀）'
      operationId: getCategoryDescendants
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: '成功取得後代'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTreeResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/product-categories/statistics:
    get:
      tags: ['商品分類 (Product Categories)']
      summary: '取得商品分類統計數據'
      operationId: getCategoryStatistics
      responses:
        '200':
          description: '成功取得統計數據'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryStatsResponse'

components:
  securitySchemes:
    sanctum:
      type: http
      scheme: bearer
      description: '使用 Laravel Sanctum Bearer Token 進行認證。請在請求頭中包含：Authorization: Bearer {token}'
  
  schemas:
    # ------------------------- Core Models -------------------------
    User:
      type: object
      description: 使用者核心資料模型
      properties:
        id: { type: integer, description: 'ID' }
        name: { type: string, description: '姓名' }
        username: { type: string, description: '用戶名' }
        email: { type: string, format: email, description: '電子郵件' }
        phone: { type: string, nullable: true }
        avatar: { type: string, format: uri, nullable: true }
        status: { type: string, enum: [active, inactive, suspended] }
        email_verified_at: { type: string, format: 'date-time', nullable: true }
        two_factor_enabled: { type: boolean }
        created_at: { type: string, format: 'date-time' }
        updated_at: { type: string, format: 'date-time' }
        store: { $ref: '#/components/schemas/Store' }
        roles: { type: array, items: { $ref: '#/components/schemas/Role' } }
    
    Store:
      type: object
      description: 門市資料模型
      properties:
        id: { type: integer }
        name: { type: string }

    Role:
      type: object
      description: 角色資料模型
      properties:
        id: { type: integer }
        name: { type: string, description: '角色內部名稱 (e.g. admin)' }
        display_name: { type: string, description: '角色顯示名稱 (e.g. 系統管理員)' }

    ProductCategory:
      type: object
      description: 商品分類模型
      properties:
        id: { type: integer }
        name: { type: string }
        slug: { type: string }
        description: { type: string, nullable: true }
        parent_id: { type: integer, nullable: true }
        status: { type: boolean }
        position: { type: integer }
        depth: { type: integer }
        children_count: { type: integer }
        created_at: { type: string, format: 'date-time' }
        updated_at: { type: string, format: 'date-time' }
        children:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'

    # ------------------------- Generic Payloads -------------------------
    PaginationLinks:
      type: object
      properties:
        first: { type: string, format: uri, nullable: true }
        last: { type: string, format: uri, nullable: true }
        prev: { type: string, format: uri, nullable: true }
        next: { type: string, format: uri, nullable: true }

    PaginationMeta:
      type: object
      properties:
        current_page: { type: integer }
        from: { type: integer, nullable: true }
        last_page: { type: integer }
        path: { type: string, format: uri }
        per_page: { type: integer }
        to: { type: integer, nullable: true }
        total: { type: integer }
        
    # ------------------------- Auth Module -------------------------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
        remember: { type: boolean }
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }
        two_factor: { type: boolean, description: '是否需要二階段驗證' }
    AuthenticatedUserResponse:
      type: object
      properties:
        data: { $ref: '#/components/schemas/User' }
    TwoFactorChallengeRequest:
      type: object
      properties:
        code: { type: string }
        recovery_code: { type: string }

    # ------------------------- User Module -------------------------
    UserResponse:
      type: object
      properties:
        data: { $ref: '#/components/schemas/User' }
    PaginatedUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        links: { $ref: '#/components/schemas/PaginationLinks' }
        meta: { $ref: '#/components/schemas/PaginationMeta' }
    CreateUserRequest:
      type: object
      required: [name, username, email, password, password_confirmation, store_id, role_ids, status]
      properties:
        name: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        password_confirmation: { type: string, format: password }
        phone: { type: string }
        store_id: { type: integer }
        role_ids: { type: array, items: { type: integer } }
        status: { type: string, enum: [active, inactive] }
    UpdateUserRequest:
      type: object
      properties:
        name: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password, description: '僅在需要更改密碼時提供' }
        password_confirmation: { type: string, format: password }
        phone: { type: string }
        store_id: { type: integer }
        role_ids: { type: array, items: { type: integer } }
        status: { type: string, enum: [active, inactive, suspended] }
    BatchStatusUserRequest:
      type: object
      required: [ids, status]
      properties:
        ids: { type: array, items: { type: integer } }
        status: { type: string, enum: [active, inactive, suspended] }
    UserStatsResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserStatsData'
    UserStatsData:
      type: object
      properties:
        counts: { $ref: '#/components/schemas/UserCounts' }
        two_factor: { $ref: '#/components/schemas/TwoFactorStats' }
        activity: { $ref: '#/components/schemas/UserActivityStats' }
    UserCounts:
      type: object
      properties:
        total: { type: integer }
        active: { type: integer }
        inactive: { type: integer }
        suspended: { type: integer }
    TwoFactorStats:
      type: object
      properties:
        enabled: { type: integer }
        disabled: { type: integer }
    UserActivityStats:
      type: object
      properties:
        new_this_week: { type: integer }
        logins_today: { type: integer }

    # ------------------------- Product Category Module -------------------------
    CategoryResponse:
      type: object
      properties:
        data: { $ref: '#/components/schemas/ProductCategory' }
    CategoryTreeResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
    PaginatedCategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
        links:
          type: object
          properties:
            first: { type: string, format: url, nullable: true }
            last: { type: string, format: url, nullable: true }
            prev: { type: string, format: url, nullable: true }
            next: { type: string, format: url, nullable: true }
        meta:
          type: object
          properties:
            current_page: { type: integer }
            from: { type: integer, nullable: true }
            last_page: { type: integer }
            path: { type: string, format: url }
            per_page: { type: integer }
            to: { type: integer, nullable: true }
            total: { type: integer }
    CategoryStatsResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CategoryStatsData'
    CategoryStatsData:
      type: object
      properties:
        total: { type: integer, description: '總分類數' }
        active: { type: integer, description: '啟用分類數' }
        inactive: { type: integer, description: '停用分類數' }
        max_depth: { type: integer, description: '最大層級深度' }
        root_nodes: { type: integer, description: '根節點數量' }
    BreadcrumbResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              name: { type: string }
    CreateCategoryRequest:
      type: object
      required: [name, status]
      properties:
        name: { type: string }
        slug: { type: string, nullable: true }
        description: { type: string, nullable: true }
        parent_id: { type: integer, nullable: true }
        status: { type: boolean }
    UpdateCategoryRequest:
      type: object
      properties:
        name: { type: string }
        slug: { type: string, nullable: true }
        description: { type: string, nullable: true }
        parent_id: { type: integer, nullable: true }
        status: { type: boolean }
    SortCategoriesRequest:
      type: object
      required: [categories]
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              position: { type: integer }
              parent_id: { type: integer, nullable: true }
    BatchStatusCategoriesRequest:
      type: object
      required: [ids, status]
      properties:
        ids: { type: array, items: { type: integer } }
        status: { type: boolean }

    # ------------------------- Generic Schemas -------------------------
    SuccessResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: '操作成功' }
    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string, example: '資源不存在' }
        code: { type: string, example: 'NOT_FOUND' }
    ValidationErrorResponse:
      type: object
      properties:
        message: { type: string, example: '給定的資料有誤' }
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["電子郵件格式不正確"]

  requestBodies:
    CreateUserRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUserRequest'
    UpdateUserRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserRequest'
    CreateCategoryRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCategoryRequest'
    UpdateCategoryRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCategoryRequest'
    SortCategoriesRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SortCategoriesRequest'

  responses:
    Success:
      description: '操作成功'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    NotFound:
      description: '找不到資源'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: '權限不足'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: '未認證'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: '驗證失敗'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
