---
description: 
globs: 
alwaysApply: true
---
{
  "$schema": "https://raw.githubusercontent.com/cursorinsight/cursor-rules/main/schema.json",

  /* ──────────────────────────────────────────────────────────
     LomisX3 企業級管理系統 Cursor Rules v2.5
     
     ⚠️  絕對遵循原則：
     1. 所有開發必須嚴格遵守本 Rules，零容忍違規
     2. 禁止重複實現已存在的功能和架構模式
     3. 新模組開發前必須檢查現有實現，優先複用
     4. 架構違規行為：警告 → 暫停權限 → 移除專案
     ────────────────────────────────────────────────────────── */

  "rules": [
    /* ═══════════════════════════════════════════════════════════
       0. 全域強制規範 (MANDATORY GLOBAL STANDARDS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "**/*.{ts,tsx,js,jsx,php,json,yml,yaml,md}",
      "rules": [
        "// ═══ 🚨 零容忍規範 (ZERO TOLERANCE) ═══",
        "❌ 絕對禁止：console.log, var_dump, debugger, dd() 等除錯殘留",
        "❌ 絕對禁止：跳過 Repository 層直接在 Controller 操作 Model",
        "❌ 絕對禁止：重複實現已存在的架構模式或共用元件",
        "❌ 絕對禁止：使用 any 型別或 @ts-ignore",
        "❌ 絕對禁止：不使用事務處理的寫入操作",
        "",
        "// ═══ 📋 基本要求 ═══",
        "✅ 所有檔案使用 UTF-8 無 BOM 編碼",
        "✅ 檔案末尾必須保留一個換行符",
        "✅ Commit message 遵循 Conventional Commits 規範",
        "✅ PR 必須通過完整 CI 流程且包含測試/文檔",
        "",
        "// ═══ 🏗️ LomisX3 專案架構記憶 ═══",
        "📌 ProductCategory 模組 v2.3 為企業級標準參考實現",
        "📌 開發新模組前必須檢查共用元件庫，禁止重複實現",
        "📌 所有模組必須遵循 SOLID 原則和分層架構",
        "📌 門市隔離機制為核心安全要求，不可繞過"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       1. 前端架構規範 (FRONTEND ARCHITECTURE)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "front/src/**/*.{ts,tsx}",
      "rules": [
        "// ═══ 🎯 技術棧強制要求 (不可替代) ═══",
        "✅ React >= 19.1.0 (前端框架)",
        "✅ TypeScript >= 5.8.3 (類型系統)",
        "✅ Vite >= 6.3.5 (建置工具)",
        "✅ shadcn/ui Latest (UI 組件庫)",
        "✅ Tailwind CSS >= 3.4.17 (CSS 框架)",
        "✅ TanStack Query >= 5.80.2 (狀態管理)",
        "✅ React Hook Form >= 7.57.0 (表單處理)",
        "✅ Zod >= 3.25.49 (Schema 驗證)",
        "✅ React Router >= 7.6.1 (路由管理)",
        "",
        "// ═══ 🧱 組件層級架構 ═══",
        "Pages Layer (路由頁面) → Layout Layer (佈局容器) → Feature Layer (業務功能) → UI Layer (基礎組件) → Hooks Layer (邏輯處理) → Utils Layer (工具函數)",
        "",
        "// ═══ 📝 TypeScript 嚴格要求 ═══",
        "❌ 絕對禁止：any, @ts-ignore, 跳過型別檢查",
        "✅ 必須使用：strict mode, 100% 型別覆蓋",
        "✅ API 型別：使用 openapi-typescript 自動生成",
        "",
        "// ═══ ⚛️ React 開發規範 ═══",
        "✅ 只能使用 Function Component + Hooks",
        "❌ 禁止使用 class component",
        "✅ 組件檔名使用 PascalCase.tsx",
        "✅ 其他檔案使用 kebab-case.ts",
        "",
        "// ═══ 🎨 UI/UX 設計規範 ═══",
        "✅ 只能使用 shadcn/ui + Tailwind CSS",
        "❌ 禁止使用其他 UI 框架 (Ant Design, Material-UI 等)",
        "✅ 深色模式使用 Tailwind CSS 變數：bg-background, text-foreground",
        "✅ 響應式設計支援所有螢幕尺寸",
        "",
        "// ═══ 🗂️ 檔案結構規範 ═══",
        "src/components/ui/ - shadcn/ui 基礎組件",
        "src/components/common/ - 通用功能組件", 
        "src/components/forms/ - 表單相關組件",
        "src/components/layout/ - 佈局組件",
        "src/pages/{module-name}/ - 模組頁面",
        "src/hooks/api/ - API Hooks",
        "src/hooks/ui/ - UI Hooks",
        "src/store/ - Zustand 狀態管理",
        "src/types/ - 型別定義 (自動生成)",
        "",
        "// ═══ 🔄 狀態管理規範 ═══",
        "✅ 伺服器狀態：統一使用 TanStack Query",
        "✅ 客戶端狀態：使用 Zustand Store",
        "❌ 禁止：直接在 useEffect 中 fetch API",
        "❌ 禁止：組件內直接調用 API",
        "",
        "// ═══ 📋 表單處理規範 ═══",
        "✅ 必須使用：React Hook Form + Zod schema",
        "✅ 驗證規則：與後端 FormRequest 保持一致",
        "✅ 錯誤處理：統一使用 toast 通知",
        "",
        "// ═══ 🛣️ 路由設計規範 ═══",
        "✅ 使用 React Router v7.6+",
        "✅ 路由檔案放置 src/pages/",
        "✅ 路由名稱使用 kebab-case",
        "✅ 權限守衛使用 PermissionGuard 組件",
        "",
        "// ═══ 🧪 測試要求 ═══",
        "✅ 組件測試：React Testing Library",
        "✅ Hook 測試：@testing-library/react-hooks", 
        "✅ E2E 測試：Playwright",
        "✅ 測試覆蓋率：≥ 80%",
        "✅ 所有新組件必須包含測試"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       2. 後端架構規範 (BACKEND ARCHITECTURE) 
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "back/app/**/*.{php}",
      "rules": [
        "// ═══ 🎯 技術棧強制要求 (不可替代) ═══",
        "✅ PHP >= 8.2 (程式語言)",
        "✅ Laravel >= 12.0 (Web 框架)",
        "✅ MySQL >= 8.0 (主資料庫)",
        "✅ Redis >= 7.0 (快取 & Session)",
        "✅ Laravel Sanctum >= 4.1 (API 認證)",
        "✅ PHPUnit/Pest >= 11.5 (測試框架)",
        "✅ Laravel Pint >= 1.13 (代碼格式化)",
        "✅ PHPStan >= 1.12 (靜態分析)",
        "",
        "// ═══ 🏗️ 強制分層架構 (SOLID 原則) ═══",
        "Controller → Service → Repository → Model → Database",
        "❌ 禁止跨層直接調用",
        "❌ 禁止 Controller 直接操作 Model",
        "❌ 禁止 Service 直接操作資料庫",
        "",
        "// ═══ 📂 已實現企業級模組 (禁止重複實現) ═══",
        "🏆 ProductCategory v2.3 - 企業級標準參考",
        "   ├── Repository: ProductCategoryRepositoryInterface + Implementation",
        "   ├── Service: ProductCategoryService + ProductCategoryCacheService", 
        "   ├── Cache: Redis 標籤式 + 根分片策略 + 防抖動機制",
        "   ├── Auth: Sanctum tokenCan() 細粒度權限",
        "   ├── API: /api/product-categories (RESTful + 進階功能)",
        "   ├── Tests: 95%+ 覆蓋率, Feature + Unit 完整測試",
        "   └── Docs: 完整技術文檔 + OpenAPI 規格",
        "",
        "// ═══ 🔒 多租戶門市隔離 (核心安全機制) ═══",
        "✅ 所有業務表格必須包含 store_id 欄位",
        "✅ 所有 Model 必須繼承 BaseModel (自動門市過濾)",
        "✅ Global Scope 自動注入門市範圍",
        "❌ 絕對禁止：withoutGlobalScope('store')",
        "",
        "// ═══ 📋 強制基礎類別繼承 ═══",
        "✅ Model: 必須繼承 app/Models/BaseModel",
        "✅ Controller: 必須繼承 app/Http/Controllers/BaseController",
        "✅ Service: 必須繼承 app/Services/BaseService",
        "✅ Repository: 必須實現對應 Interface",
        "✅ Policy: 必須繼承 app/Policies/BasePolicy",
        "",
        "// ═══ 🛠️ Repository Pattern (強制實現) ═══",
        "✅ 所有數據存取必須通過 Repository 模式",
        "✅ 介面定義：app/Repositories/Contracts/{Module}RepositoryInterface",
        "✅ 實現類別：app/Repositories/{Module}Repository",
        "✅ 依賴注入：透過 ServiceProvider 註冊綁定",
        "",
        "// ═══ ⚙️ Service Layer Pattern (強制實現) ═══",
        "✅ 所有業務邏輯必須在 Service 層處理",
        "✅ 介面定義：app/Services/Contracts/{Module}ServiceInterface",
        "✅ 實現類別：app/Services/{Module}Service",
        "✅ 事務處理：所有寫操作使用 DB::transaction()",
        "",
        "// ═══ 👁️ Observer Pattern (強制實現) ═══",
        "✅ 所有 Model 變更必須通過 Observer 處理",
        "✅ 觀察者：app/Observers/{Module}Observer",
        "✅ 依賴注入：Observer 注入 Service 和 Cache Service",
        "✅ 職責分離：Observer 不直接執行業務邏輯",
        "",
        "// ═══ ⚡ 快取架構規範 ═══",
        "✅ 統一使用 Redis 標籤式快取：Cache::tags(['{module}_cache'])",
        "✅ 快取鍵格式：{prefix}_{type}_{params} (如 pc_tree_active_root001)",
        "✅ TTL 統一：3600 秒，事件觸發清除",
        "✅ 參考實現：ProductCategoryCacheService (根分片 + 防抖動)",
        "",
        "// ═══ 🛡️ 錯誤處理規範 ═══",
        "✅ 業務錯誤：使用 BusinessException + ErrorCode 枚舉",
        "✅ 統一格式：{\"success\": bool, \"message\": string, \"code\": string}",
        "✅ HTTP 狀態：400 系列客戶端錯誤，500 系列伺服器錯誤",
        "",
        "// ═══ 🔐 權限認證規範 ═══",
        "✅ 認證方式：Laravel Sanctum + tokenCan() 檢查",
        "✅ 權限格式：{module}.{action} (如 categories.read)",
        "✅ 自動授權：Controller 使用 authorizeResource()",
        "✅ Policy 策略：繼承 BasePolicy，檢查門市歸屬",
        "",
        "// ═══ 📊 API 設計規範 ═══",
        "✅ RESTful 設計：使用標準 HTTP Method 和資源命名",
        "✅ 自訂端點：/api/{resources}/statistics, /tree, /batch-*",
        "✅ 回應格式：統一使用 Laravel Resource",
        "✅ 請求驗證：使用 FormRequest 類別",
        "",
        "// ═══ 🗄️ 資料庫設計規範 ═══",
        "✅ 主鍵：統一使用 BIGINT UNSIGNED AUTO_INCREMENT",
        "✅ 門市隔離：store_id BIGINT UNSIGNED NOT NULL",
        "✅ 審計欄位：created_by, updated_by, timestamps, soft deletes",
        "✅ 索引設計：門市複合索引優先，業務單一索引補充",
        "",
        "// ═══ 🧪 測試架構規範 ═══",
        "✅ 測試框架：Pest (describe/it 語法)",
        "✅ 測試層級：Feature (API + DB + Observer) + Unit (Service + Repository)",
        "✅ 覆蓋率要求：≥ 85%",
        "✅ Mock 依賴：使用 Mockery 進行依賴注入測試",
        "",
        "// ═══ 📏 代碼品質規範 ═══",
        "✅ 嚴格類型：declare(strict_types=1) 檔案頂部",
        "✅ 代碼風格：Laravel Pint (PSR-12 標準)",
        "✅ 靜態分析：PHPStan Level 5 + baseline 管理",
        "✅ 文檔註釋：PHPDoc 完整覆蓋",
        "",
        "// ═══ 🚫 絕對禁止行為 ═══",
        "❌ 跳過 Repository 直接在 Controller 操作 Model",
        "❌ 在 Repository 中處理業務邏輯",
        "❌ 不使用事務處理的寫入操作",
        "❌ 忽略門市隔離機制",
        "❌ 硬編碼魔術數字和字串",
        "❌ 使用 DB::table() 或 raw query (特殊情況需在 Repository + Unit Test)",
        "❌ 重複實現已有的共用元件"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       3. 共用元件庫規範 (SHARED COMPONENTS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "**/*.{php,ts,tsx}",
      "rules": [
        "// ═══ 🔧 後端共用元件 (強制使用) ═══",
        "✅ app/Models/BaseModel.php - 門市隔離、軟刪除、審計",
        "✅ app/Http/Controllers/BaseController.php - API 回應格式、錯誤處理",
        "✅ app/Services/BaseService.php - 事務處理、業務邏輯基礎",
        "✅ app/Repositories/BaseRepository.php - 標準 CRUD 操作",
        "✅ app/Policies/BasePolicy.php - 權限檢查基礎邏輯",
        "✅ app/Exceptions/BusinessException.php - 業務邏輯例外",
        "✅ app/Enums/ErrorCode.php - 統一錯誤代碼",
        "✅ app/Services/BaseCacheService.php - Redis 快取管理",
        "",
        "// ═══ 🎨 前端共用元件 (強制使用) ═══",
        "✅ components/ui/* - shadcn/ui 基礎組件",
        "✅ components/common/data-table.tsx - 數據表格",
        "✅ components/common/confirm-dialog.tsx - 確認對話框",
        "✅ components/common/loading-spinner.tsx - 載入指示器",
        "✅ components/common/error-boundary.tsx - 錯誤邊界",
        "✅ components/common/permission-guard.tsx - 權限守衛",
        "✅ lib/api-client.ts - 型別安全的 API 客戶端",
        "✅ hooks/api/use-*.ts - 統一 API Hooks",
        "",
        "// ═══ 📋 共用元件使用規則 ═══",
        "✅ 強制使用：所有模組必須使用已實現的共用元件",
        "❌ 禁止重複：不得重新實現已存在的功能",
        "✅ 擴展規範：需要新功能時，先擴展共用元件再使用",
        "✅ 版本管理：共用元件變更需要版本號管理"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       4. 資料庫設計規範 (DATABASE STANDARDS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "back/database/migrations/**/*.{php}",
      "rules": [
        "// ═══ 📋 標準表格結構 ═══",
        "✅ 主鍵：id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY",
        "✅ 門市隔離：store_id BIGINT UNSIGNED NOT NULL",
        "✅ 業務欄位：name, slug, description, status, position",
        "✅ 審計欄位：created_by, updated_by (可選)",
        "✅ 時間戳記：created_at, updated_at, deleted_at (軟刪除)",
        "",
        "// ═══ 🔍 索引設計規範 ═══",
        "✅ 複合索引：(store_id, status), (store_id, position)",
        "✅ 唯一索引：(store_id, slug) 確保門市內唯一",
        "✅ 搜尋索引：name, slug 支援查詢",
        "✅ 階層索引：(store_id, parent_id), (store_id, depth)",
        "",
        "// ═══ 🏷️ 命名規範 ═══",
        "✅ 索引命名：idx_{table}_{columns}, uk_{table}_{columns}",
        "✅ 外鍵命名：fk_{table}_{ref_table}",
        "✅ 索引長度：≤ 64 字元 (MySQL 限制)",
        "",
        "// ═══ 📝 Migration 要求 ═══",
        "✅ 欄位註釋：所有欄位必須加 comment() 說明",
        "✅ 外鍵約束：使用 constrained() 和 onDelete()",
        "✅ 回滾支援：down() 方法正確實現",
        "✅ 資料驗證：檢查重複資料並拋出異常"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       5. 測試架構規範 (TESTING STANDARDS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "back/tests/**/*.{php}",
      "rules": [
        "// ═══ 🧪 測試金字塔策略 ═══",
        "70% Unit Tests (業務邏輯) + 25% Integration Tests (API) + 5% E2E Tests (關鍵流程)",
        "",
        "// ═══ 📊 Pest 測試框架 ═══",
        "✅ 使用 describe/it 語法結構",
        "✅ 檔案命名：*Test.php",
        "✅ 測試命名：it('should_do_something')",
        "✅ 覆蓋率要求：≥ 85%",
        "",
        "// ═══ 🏷️ 測試分類標準 ═══",
        "tests/Feature/ - API 端點 + 資料庫 + Observer 整合測試",
        "tests/Unit/ - Service + Repository + 純函數單元測試",
        "✅ Feature: 測試完整業務流程",
        "✅ Unit: 測試獨立業務邏輯",
        "",
        "// ═══ 🎭 Mock 和依賴注入 ═══",
        "✅ 使用 Mockery 進行依賴模擬",
        "✅ Repository 層測試：Mock 外部依賴",
        "✅ Service 層測試：Mock Repository 介面",
        "✅ Observer 測試：Mock Service 和 Cache",
        "",
        "// ═══ 📋 測試覆蓋要求 ═══",
        "✅ API 端點：所有 CRUD + 進階功能",
        "✅ 業務邏輯：所有 Service 方法",
        "✅ 資料存取：所有 Repository 方法",
        "✅ 權限檢查：所有 Policy 方法",
        "✅ 錯誤處理：所有異常情況"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       6. CI/CD 流程規範 (CI/CD STANDARDS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": ".github/workflows/ci.yml",
      "rules": [
        "// ═══ 🔄 CI 流程順序 ═══",
        "1. Code Quality → 2. Static Analysis → 3. Tests → 4. Build → 5. Deploy",
        "",
        "// ═══ 📊 後端檢查項目 ═══",
        "✅ Laravel Pint：代碼格式化檢查",
        "✅ PHPStan Level 5：靜態分析 + baseline drift 檢測",
        "✅ Pest Tests：單元測試 + 功能測試，覆蓋率 ≥ 85%",
        "✅ PHP 版本：8.2, 8.3 多版本測試",
        "",
        "// ═══ 🎨 前端檢查項目 ═══",
        "✅ ESLint：--max-warnings 0 零警告要求",
        "✅ Prettier：代碼格式檢查",
        "✅ TypeScript：嚴格模式編譯檢查",
        "✅ Tests：Jest + React Testing Library + Playwright E2E",
        "✅ Build：生產環境建置檢查",
        "",
        "// ═══ 📚 文檔生成 ═══",
        "✅ OpenAPI：自動生成 API 文檔",
        "✅ TypeScript：自動生成前端型別",
        "✅ Coverage：測試覆蓋率報告",
        "",
        "// ═══ 🚨 失敗條件 ═══",
        "❌ 任一檢查失敗即阻止 merge",
        "❌ 測試覆蓋率低於標準",
        "❌ PHPStan 新增錯誤",
        "❌ ESLint 有警告或錯誤"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       7. 效能與監控規範 (PERFORMANCE & MONITORING)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "**/*.{php,ts,tsx}",
      "rules": [
        "// ═══ ⚡ 效能目標 ═══",
        "✅ API Cold Start：≤ 800ms (本地環境)",
        "✅ API Hot Response：≤ 200ms",
        "✅ Cache Hit Rate：> 85%",
        "✅ Frontend Load：< 3s (首次載入)",
        "✅ Frontend Interaction：< 100ms",
        "",
        "// ═══ 📊 快取策略 ═══",
        "✅ Redis 標籤式快取：統一使用 Cache::tags()",
        "✅ TTL 管理：3600s 預設，事件觸發清除",
        "✅ 分層快取：樹狀結構、統計、搜尋結果",
        "✅ 精準清除：避免全域快取失效",
        "",
        "// ═══ 🔍 查詢優化 ═══",
        "✅ 避免 N+1：使用 with() 預載入",
        "✅ 分頁查詢：支援 Cursor Pagination",
        "✅ 索引優化：所有查詢條件建立索引",
        "✅ 批次操作：使用 chunk() 處理大量資料",
        "",
        "// ═══ 📈 監控指標 ═══",
        "✅ Prometheus 集成：記錄關鍵業務指標",
        "✅ 執行時間：追蹤 API 回應時間",
        "✅ 錯誤率：監控業務異常頻率",
        "✅ 資源使用：CPU、記憶體、磁碟監控"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       8. 安全規範 (SECURITY STANDARDS)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "**/*.{php,ts,tsx}",
      "rules": [
        "// ═══ 🔐 認證授權 ═══",
        "✅ API 認證：Laravel Sanctum Token",
        "✅ 權限檢查：tokenCan() 細粒度控制",
        "✅ 門市隔離：所有查詢自動過濾 store_id",
        "✅ CSRF 保護：SPA 模式 CSRF Token",
        "",
        "// ═══ 🛡️ 輸入驗證 ═══",
        "✅ 後端驗證：FormRequest 嚴格驗證",
        "✅ 前端驗證：Zod schema 與後端一致",
        "✅ SQL 注入：禁用 raw query，使用 Eloquent",
        "✅ XSS 防護：輸出轉義，內容安全策略",
        "",
        "// ═══ 🔒 資料保護 ═══",
        "✅ 敏感欄位：隱藏 password、token 等",
        "✅ 軟刪除：重要資料使用軟刪除",
        "✅ 審計日誌：記錄關鍵操作",
        "✅ 備份策略：定期資料備份",
        "",
        "// ═══ 🚨 安全檢查 ═══",
        "❌ 禁止：硬編碼密碼、Token",
        "❌ 禁止：跳過權限檢查",
        "❌ 禁止：直接暴露敏感資訊",
        "❌ 禁止：使用不安全的加密方式"
      ]
    },

    /* ═══════════════════════════════════════════════════════════
       9. 開發工作流程 (DEVELOPMENT WORKFLOW)
       ═══════════════════════════════════════════════════════════ */
    {
      "pattern": "**/*",
      "rules": [
        "// ═══ 📋 新模組開發檢查清單 ═══",
        "□ 1. 需求分析：確認功能範圍和依賴關係",
        "□ 2. 架構設計：遵循 SOLID 原則和分層架構",
        "□ 3. 檢查複用：搜尋現有模組，優先複用",
        "□ 4. 資料庫設計：使用標準表格結構和索引",
        "□ 5. 後端開發：Repository → Service → Controller → Tests",
        "□ 6. 前端開發：Hooks → Components → Pages → Tests",
        "□ 7. 整合測試：API 測試 → E2E 測試",
        "□ 8. 程式碼審核：遵循檢查清單",
        "□ 9. 文檔更新：API 文檔、使用說明",
        "□ 10. 部署上線：CI/CD 流程驗證",
        "",
        "// ═══ 🔍 開發前必檢項目 ═══",
        "✅ 是否已有類似功能？檢查現有模組清單",
        "✅ 可否複用現有元件？優先使用共用元件",
        "✅ 命名是否符合規範？API kebab-case, Cache prefix_",
        "✅ 是否遵循架構模式？Repository + Service + Cache",
        "",
        "// ═══ 📝 完成後更新項目 ═══",
        "□ 更新模組註冊表 (metadata.modules)",
        "□ 更新 .env.example 相關配置",
        "□ 更新 CI workflow (如需要)",
        "□ 撰寫/更新模組文檔",
        "□ 更新共用元件清單",
        "",
        "// ═══ 🚫 違規處理流程 ═══",
        "第一次違規：⚠️ 警告 + 強制重構",
        "第二次違規：⏸️ 程式碼權限暫停 + 培訓",
        "第三次違規：🚫 專案移除"
      ]
    }
  ],

  /* ═══════════════════════════════════════════════════════════
     LomisX3 專案元數據 (PROJECT METADATA)
     ═══════════════════════════════════════════════════════════ */
  "metadata": {
    "project": "LomisX3 企業級管理系統",
    "version": "2.5.0",
    "cursorRulesVersion": "2025-01-07",
    "lastUpdated": "2025-01-07",
    "architecture": "前後端分離 + 多租戶 + 微服務準備",
    
    /* ──────────────────────────────────────── */
    "techStack": {
      "frontend": {
        "framework": "React >= 19.1.0",
        "language": "TypeScript >= 5.8.3", 
        "ui": "shadcn/ui + Tailwind CSS >= 3.4.17",
        "state": "TanStack Query >= 5.80.2 + Zustand",
        "form": "React Hook Form >= 7.57.0 + Zod >= 3.25.49",
        "router": "React Router >= 7.6.1",
        "build": "Vite >= 6.3.5"
      },
      "backend": {
        "language": "PHP >= 8.2",
        "framework": "Laravel >= 12.0",
        "database": "MySQL >= 8.0",
        "cache": "Redis >= 7.0",
        "auth": "Laravel Sanctum >= 4.1",
        "test": "PHPUnit/Pest >= 11.5",
        "quality": "Laravel Pint + PHPStan Level 5"
      }
    },

    /* ──────────────────────────────────────── */
    "completedModules": {
      "ProductCategory": {
        "status": "✅ 企業級完成",
        "version": "v2.3",
        "completion": "100%",
        "testCoverage": "95%+",
        "features": [
          "🌳 階層式結構 (無限層級)",
          "🚀 高效快取 (Redis 標籤式 + 根分片策略)", 
          "📊 豐富統計 (深度統計、節點計數)",
          "🔒 安全權限 (Sanctum Token 細粒度控制)",
          "📄 雙重分頁 (標準分頁 + 游標分頁)",
          "🎯 精準搜尋 (多欄位搜尋 + 進階篩選)",
          "📈 監控觀測 (Prometheus 指標收集)",
          "🧪 完整測試 (85%+ 測試覆蓋率)"
        ],
        "api": {
          "prefix": "/api/product-categories",
          "endpoints": 12,
          "permissions": "categories.{read,create,update,delete}"
        },
        "cache": {
          "prefix": "pc_",
          "strategy": "標籤式 + 根分片 + 防抖動",
          "ttl": "3600s"
        },
        "referenceFiles": [
          "app/Http/Controllers/Api/ProductCategoryController.php",
          "app/Services/ProductCategoryService.php",
          "app/Services/ProductCategoryCacheService.php", 
          "app/Repositories/ProductCategoryRepository.php",
          "tests/Feature/ProductCategory*.php"
        ]
      }
    },

    /* ──────────────────────────────────────── */
    "sharedComponents": {
      "backend": [
        "✅ BaseModel - 門市隔離、軟刪除、審計欄位",
        "✅ BaseController - API 回應格式、錯誤處理", 
        "✅ BaseService - 事務處理、業務邏輯基礎",
        "✅ BaseRepository - 標準 CRUD 操作介面",
        "✅ BasePolicy - 權限檢查基礎邏輯",
        "✅ BusinessException - 業務邏輯例外 + ErrorCode 枚舉",
        "✅ BaseCacheService - Redis 快取管理",
        "✅ ApiResponseTrait - 統一 API 回應格式"
      ],
      "frontend": [
        "✅ shadcn/ui 基礎組件 (Button, Input, Dialog, Select, Badge, Table)",
        "✅ DataTable - 數據表格 (排序、篩選、分頁)",
        "✅ ConfirmDialog - 確認對話框",
        "✅ LoadingSpinner - 載入指示器", 
        "✅ ErrorBoundary - 錯誤邊界",
        "✅ PermissionGuard - 權限守衛",
        "✅ api-client.ts - 型別安全的 API 客戶端",
        "✅ API Hooks - use-list, use-create, use-update, use-delete",
        "✅ Form 組件 - FormField, FormWrapper + React Hook Form 整合"
      ]
    },

    /* ──────────────────────────────────────── */
    "performanceTargets": {
      "api": {
        "coldStart": "≤ 800ms",
        "hotResponse": "≤ 200ms", 
        "cacheHitRate": "> 85%"
      },
      "frontend": {
        "initialLoad": "< 3s",
        "interaction": "< 100ms",
        "bundleSize": "< 1MB"
      },
      "database": {
        "queryTime": "< 50ms",
        "indexCoverage": "> 95%"
      },
      "testing": {
        "backendCoverage": "≥ 85%",
        "frontendCoverage": "≥ 80%", 
        "e2eCoverage": "關鍵流程 100%"
      }
    },

    /* ──────────────────────────────────────── */
    "qualityStandards": {
      "backend": {
        "phpstanLevel": "Level 5",
        "pestFramework": "describe/it syntax",
        "codeStyle": "Laravel Pint (PSR-12)"
      },
      "frontend": {
        "typescript": "Strict mode, 100% coverage",
        "eslint": "Zero warnings policy",
        "prettier": "Consistent formatting"
      },
      "cicd": {
        "pipeline": "Code Quality → Static Analysis → Tests → Build",
        "failurePolicy": "任一檢查失敗即阻止 merge",
        "phpVersions": ["8.2", "8.3"]
      }
    },

    /* ──────────────────────────────────────── */
    "securityRequirements": {
      "authentication": "Laravel Sanctum Token",
      "authorization": "tokenCan() 細粒度權限",
      "dataIsolation": "多租戶門市隔離 (store_id)",
      "inputValidation": "FormRequest + Zod schema",
      "outputSecurity": "Laravel Resource + 敏感欄位隱藏",
      "sqlInjection": "禁用 raw query，強制 Eloquent ORM",
      "xssProtection": "輸出轉義 + 內容安全策略"
    },

    /* ──────────────────────────────────────── */
    "developmentRules": {
      "architecture": "SOLID 原則強制執行",
      "layering": "Controller → Service → Repository → Model",
      "reusability": "優先複用現有元件，禁止重複實現",
      "testing": "新功能必須包含完整測試",
      "documentation": "API 文檔自動生成 + 同步更新",
      "codeReview": "所有 PR 必須通過 CI + Code Review"
    }
  }
}