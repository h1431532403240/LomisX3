name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.2, 8.3]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (jq for JSON processing)
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Run Laravel Pint (代碼格式檢查)
      run: ./vendor/bin/pint --test -v

    - name: Static analysis (PHPStan Level 5 with Baseline)
      run: ./vendor/bin/phpstan analyse --memory-limit=-1 --error-format=github

    - name: Detect baseline drift (防止技術債務增加)
      run: |
        echo "🔍 檢測 PHPStan baseline 是否有新增錯誤..."
        
        # 執行 PHPStan 並捕獲輸出
        php vendor/bin/phpstan analyse --no-progress --error-format=table \
          | tee /tmp/stan.txt || true
        
        # 提取當前錯誤數量
        CURRENT_ERRORS=$(grep -Eo '[0-9]+ errors?' /tmp/stan.txt | head -1 | cut -d' ' -f1 || echo "0")
        
        # 從 baseline 檔案提取允許的錯誤數量
        BASELINE_ERRORS=$(grep -Eo '"totals":\{"errors":[0-9]+' phpstan-baseline.neon | grep -Eo '[0-9]+' || echo "0")
        
        echo "📊 錯誤數量比較："
        echo "  當前錯誤: $CURRENT_ERRORS"
        echo "  Baseline 限制: $BASELINE_ERRORS"
        
        # 檢查是否超過 baseline 限制
        if [ "$CURRENT_ERRORS" -gt "$BASELINE_ERRORS" ]; then
          echo "❌ 技術債務增加警告："
          echo "::error::PHPStan 錯誤數量增加 (當前: $CURRENT_ERRORS > Baseline: $BASELINE_ERRORS)"
          echo "💡 請修復新增的靜態分析問題或更新 baseline (如果是合理的技術債務)"
          exit 1
        else
          echo "✅ PHPStan baseline 檢查通過"
          if [ "$CURRENT_ERRORS" -lt "$BASELINE_ERRORS" ]; then
            echo "🎉 技術債務減少: $CURRENT_ERRORS < $BASELINE_ERRORS"
            echo "💡 建議更新 baseline 以反映改進"
          fi
        fi

    - name: Execute tests with coverage (P1.3 需求：85% 覆蓋率防護)
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        echo "🧪 執行測試並生成覆蓋率報告..."
        ./vendor/bin/pest \
          --coverage \
          --coverage-html=coverage-html \
          --coverage-clover=coverage.xml \
          --coverage-text \
          --min=85 \
          --fail-on-risky

    - name: Generate Test Summary (覆蓋率摘要)
      if: always()
      run: |
        echo "### 📊 測試覆蓋率報告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 提取覆蓋率資訊
        if [ -f "coverage.xml" ]; then
          coverage=$(grep -o 'statements.*percent="[^"]*"' coverage.xml | head -1 | grep -o '[0-9.]*' | head -1)
          if [ ! -z "$coverage" ]; then
            echo "| 指標 | 值 | 狀態 |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-----|------|" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$coverage >= 85" | bc -l) )); then
              echo "| 程式碼覆蓋率 | ${coverage}% | ✅ 達標 (≥85%) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 程式碼覆蓋率 | ${coverage}% | ❌ 未達標 (<85%) |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        fi
        
        echo "| 最低要求 | 85% | 企業級品質標準 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 詳細的 HTML 覆蓋率報告已上傳至 Artifacts" >> $GITHUB_STEP_SUMMARY

    - name: Upload Test Coverage Artifacts (HTML 報告)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-html-php${{ matrix.php-version }}
        path: coverage-html/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload coverage reports to Codecov
      if: matrix.php-version == '8.2'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  documentation-and-artifacts:
    runs-on: ubuntu-latest
    needs: laravel-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-docs-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-docs-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Copy .env and setup
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate
        chmod -R 777 storage bootstrap/cache

    - name: Generate API Documentation (Scribe)
      run: |
        echo "📚 生成 API 文檔..."
        php artisan scribe:generate
        
        # 確認文檔生成成功
        if [ -d "public/docs" ]; then
          echo "✅ API 文檔生成成功"
          echo "📄 生成的文檔檔案："
          find public/docs -type f -name "*.html" | head -10
        else
          echo "❌ API 文檔生成失敗"
          exit 1
        fi

    - name: Generate Documentation Summary
      run: |
        echo "### 📚 文檔生成報告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 文檔類型 | 狀態 | 說明 |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "public/docs" ]; then
          doc_count=$(find public/docs -name "*.html" | wc -l)
          echo "| Scribe API 文檔 | ✅ 已生成 | ${doc_count} 個 HTML 檔案 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Scribe API 文檔 | ❌ 失敗 | 文檔生成失敗 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "docs/monitoring" ]; then
          echo "| 監控配置文檔 | ✅ 存在 | Grafana + Prometheus 配置 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 完整文檔已上傳至 Artifacts，可下載查看" >> $GITHUB_STEP_SUMMARY

    - name: Upload API Documentation Artifacts (Scribe)
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: |
          public/docs/
          docs/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Monitoring Configuration Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-config
        path: |
          docs/monitoring/
          infrastructure/prometheus/
        retention-days: 30
        if-no-files-found: warn

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-code-quality-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-code-quality-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: 代碼品質分析彙總
      run: |
        echo "### 🔍 代碼品質檢查結果" >> $GITHUB_STEP_SUMMARY
        echo "| 檢查項目 | 狀態 | 說明 |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # Pint 格式檢查
        if ./vendor/bin/pint --test -v; then
          echo "| Laravel Pint | ✅ 通過 | 程式碼格式符合標準 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Laravel Pint | ❌ 失敗 | 程式碼格式需要修正 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # PHPStan 靜態分析（使用 baseline）
        if ./vendor/bin/phpstan analyse --memory-limit=-1 --error-format=table; then
          echo "| PHPStan Level 5 | ✅ 通過 | 靜態分析符合 baseline 標準 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| PHPStan Level 5 | ❌ 失敗 | 發現新的靜態分析問題 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **品質標準**: Laravel Pint + PHPStan Level 5 + 85% 測試覆蓋率" >> $GITHUB_STEP_SUMMARY 